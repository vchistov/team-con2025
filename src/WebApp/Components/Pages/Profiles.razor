@page "/profiles"
@using System.Runtime.CompilerServices
@using Customer.Profile.V1
@using WebApp.Models

@inject ProfileService.ProfileServiceClient ServiceClient

@attribute [StreamRendering]

<PageTitle>Customer Profiles</PageTitle>

<h1>Profiles</h1>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th aria-label="Person full name">Name</th>
            <th>Birth Date</th>
            <th>Phone</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var profile in _profiles)
        {
            <tr>
                <td>@profile.Id</td>
                <td>@profile.Name</td>
                <td>@profile.BirthDate?.ToShortDateString()</td>
                <td>@profile.Phone</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private CancellationTokenSource _cts = new();
    private List<ProfileModel> _profiles = new();

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await foreach (var profile in LoadProfilesAsync(10, _cts.Token))
        {
            _profiles.Add(profile);
        }
    }

    private async IAsyncEnumerable<ProfileModel> LoadProfilesAsync(int batchSize, [EnumeratorCancellation] CancellationToken cancellationToken)
    {
        var responseStream = ServiceClient.ListProfiles(new ListProfilesRequest(), cancellationToken: cancellationToken).ResponseStream;

        int count = 0;
        while (await responseStream.MoveNext(cancellationToken))
        {
            count++;
            if (count % batchSize == 0)
            {
                StateHasChanged();
                // await Task.Delay(2000, cancellationToken);
            }

            yield return responseStream.Current.ToProfileModel();
        }
    }
}
